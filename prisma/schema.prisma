datasource db {
  provider = "postgresql" // or "mysql" if you are using MySQL
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  nom      String
  role     Role     // Enum for admin/client
  phone    String?
  password String   @default("")  // New password field
  orders   Order[]
}

model Product {
  id          Int      @id @default(autoincrement())
  nom         String   @unique
  description String
  image       String   // URL or path to the product image
  prix        String
  type        String[]
  barre       String[]
  bases       Base[]   // Relation to the Base model
  tailles     Taille[] // Relation to the Taille model
  orders      Order[]  // Relation to Orders
}

model Base {
  id           Int      @id @default(autoincrement())
  name         String   @unique// Name of the base
  image        String   // URL to the image
  price        Float    // Price for this base
  productId    Int
  product      Product  @relation(fields: [productId], references: [id])
  orders       Order[]  // Relation to Orders
}

model Taille {
  id           Int      @id @default(autoincrement())
  name         String   @unique// Name of the taille
  image        String   // URL to the image
  downloadLink String?  // Optional download link
  price        Float    // Price for this taille
  productId    Int
  product      Product  @relation(fields: [productId], references: [id])
  orders       Order[]  // Relation to Orders
}

model Order {
  id             Int      @id @default(autoincrement())
  orderGroupId   Int      // Group ID to identify products in the same order
  status         String   // 'delivered' or 'pending'
  image          String   // Product image URL or path
  qty            Int      // Total quantity ordered for the product
  email          String   // FK from Customer
  name           String   // FK from Customer's name
  productNom     String   // FK from Product.nom

  // Fields to store specific selections
  selectedBaseName   String?     // FK to Base
  selectedTailleName String?     // FK to Taille
  baseQuantity     Int?     // Quantity of the selected base
  tailleQuantity   Int?     // Quantity of the selected taille

  selectedType   String?
  selectedBarre  String?  // Selected value from Product.barre

  product        Product  @relation(fields: [productNom], references: [nom])
  customer       Customer @relation(fields: [email], references: [email])
  selectedBase   Base?    @relation(fields: [selectedBaseName], references: [name])
  selectedTaille Taille?  @relation(fields: [selectedTailleName], references: [name])

  @@index([productNom])
  @@index([email])
  @@index([orderGroupId])
}

enum Role {
  admin
  client
}

enum OrderStatus {
  livree
  attente
}
